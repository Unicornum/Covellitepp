
@startuml

interface IWindow
{
  {abstract} + Rect GetClientRect()
  {abstract} + GetRenders()
  ---
}

class Window
{
  + IWindow:: ...
  ---
  + Window(os::IWindow &)
}

IWindow <|-.- Window

interface IGraphicApi as "renderer::IGraphicApi"
{
  {abstract} + String GetUsingApi()
  ---
  {abstract} + void PresentFrame()
  {abstract} + void ResizeWindow(int, int)
  {abstract} + Creators_t GetCreators(void)
}

IGraphicApi --* Window
IGraphicApi <|-.- "renderer::OpenGLES\nrenderer::OpenGLES2\nrenderer::OpenGLES3\nrenderer::OpenGL\nrenderer::DirectX10\nrenderer::DirectX11"

class Component
{
  + static Make(...);
  ---
  + bool IsType(Name);
  + T GetValue(Name, DefaultValue);
  + void SetValue(Name, T Value);
  ---
  + Component(map<String, Any_t>);
}

class Renders as "Component::Renders"
{
  + Render_t[] Obtain(Component[])
  + void Remove(Component[])
  ---
  + Renders(Creators_t)
}

Renders --o Window
Component --o Renders

@enduml


@startuml

interface IWindow
{
  {abstract} + Rect GetClientRect()
  {abstract} + RenderInterface * GetRenderInterface()
  ---
}

class Window
{
  + IWindow:: ...
  ---
  + Window(os::Window &)
}

IWindow <|-.- Window

class Renderer as "renderer::Renderer"
{
  + void StartDrawingFrame()
  + void PresentFrame()
  + void ResizeWindow(int, int)
  ---
  + RenderInterface:: ...
  ---
  + Renderer(String _ApiName, Data)
}

Window ---* Renderer

interface Rocket_Core_RenderInterface as "Rocket::Core::RenderInterface"
{
  {abstract} + ... functions
  ---
}

interface RenderInterface
{
  {abstract} + RendersPtr_t GetRenders()
  ---
}

Rocket_Core_RenderInterface <|-.- RenderInterface
RenderInterface <|-.- Renderer

interface IGraphicApi as "renderer::IGraphicApi"
{
  {abstract} + String GetUsingApi()
  ---
  {abstract} + void StartDrawingFrame()
  {abstract} + void PresentFrame()
  {abstract} + void ResizeWindow(int, int)
  {abstract} + Creators_t GetCreators(void)
}

Renderer ---* IGraphicApi

IGraphicApi <|-.- "renderer::OpenGLES\nrenderer::OpenGL\nrenderer::DirectX9\nrenderer::DirectX10\nrenderer::DirectX11"

class Component
{
  + T GetValue(Name, DefaultValue)
  + void SetValue(Name, T Value)
  ---
  + Component(map<String, Any_t>)
}

class Renders as "Component::Renders"
{
  + Render_t[] Obtain(Component[])
  + void Remove(Component[])
  ---
  + Renders(Creators_t)
}

Renderer ---* Renders
Renders ---o Component

@enduml

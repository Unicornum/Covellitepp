
/**
* \page CovelliteApiGlossaryPage Глоссарий
*  
*  - \b Компонент - объект, содержащий информацию об одном аспекте игрового
*  объекта (таких как текстура, меш, положение и т.п.).
*  - \b Игровой \b объект - объект в игровом мире, содержащий информацию в виде
*  набора компонентов.
*  - \b Игровой \b мир - набор игровых объектов, разбитый на иерархическую
*  структуру из ячеек, каждая из которых содержит несколько игровых объектов;
*  назначение - оптимизация подгрузки и выгрузки игровых объектов (сразу
*  ячейками).
*  - \b Игровая \b сцена - набор игровых объектов, непосредственно участвующих
*  в игровом процессе; объекты подгружаются (по мере необходимости) из игрового
*  мира и это именно те объекты, которые должны обновляться в процессе игры.
*  - \b Рендер - объект, предназначенный для отображения игровых объектов
*  в 3D сцене, создается на основе одного или набора нескольких компонентов.
*  - \b Объект \b 3D \b сцены - объект (набор рендеров), из которых состоит
*  3D сцена.
*  - \b 3D \b сцена - набор объектов 3D сцены, которые отображаются в окне
*  программы; является 'зеркалом' той части объектов игровой сцены, которые
*  попадают в поле зрения камеры.
*/

/**
* \page CovelliteApiComponentSystemPage Компонентная система
*  
*  Используемые термины
*  ====================
*  
* \copydoc CovelliteApiGlossaryPage
*  
*  Исходные требования
*  ===================
*
*  - Не должно производиться никаких лишних действий (вызовов пустых функций),
*  для каждого объекта (игрового и 3D сцены) должен выполнятся набор только ему
*  необходимых действий.
*  - Отсутствие дублирования информации (все объекты, отрисовываемые при помощи
*  одного меша, должны содержать ссылку на единую область памяти с информацией
*  об этом меше).
*  
*  Компоненты
*  ==========
*
*  Фреймворк предоставляет класс компонента 
*  [Component](\ref covellite::api::Component), а также механизм создания 
*  рендеров для этих компонентов с учетом активного графического Api 
*  (рендеры создаются через объект класса 
*  [Renders](\ref covellite::api::Component::Renders), который может быть 
*  получен при помощи функции GetRenders() класса 
*  [Window](\ref covellite::api::Window)).
*  
*  Класс компонента:
*  - Содержит и предоставляет доступ к параметрам, которые используются 
*  для создания рендеров.
*  - Параметры (кроме обязательных) могут отсутствовать, для таких параметров
*  предусмотрено задание значений по умолчанию.
*  - Обязательный параметр \b id - идентификатор компонента. Для компонентов
*  с одним и тем же идентификатором будет использоваться один и тот же рендер,
*  поэтому объекты, содержащие один и тот же меш, могут содержать компоненты,
*  у которых задан только (один и тот же) идентификатор, а развернутое
*  описание этого компонента можно сделать в другом месте и создать его рендер
*  заранее.
*  - Обязательный параметр \b type - тип компонента, который определяет способ
*  отрисовки этого компонента.
*  - Параметр \b kind - дочерний подтип компонента; у некоторых типов 
*  не используется.
*  - Первоначальная информация может загружаться в виде строк, в дальнейшем
*  (для ускорения рендеринга) при обновлении игровых объектов значения 
*  параметров следует устанавливать того же типа, какой используют рендеры
*  (подробнее см. в описании параметорв компонентов).
*  
* \note
*  Предполагается, что исходная информация о компоненте будет хранится
*  в узлах xml файла, из которых параметры будут загружаться как атрибуты,
*  у которых имя атрибута будет названием параметра, а значение атрибута -
*  значением параметра.
*  
*  Типы компонентов
*  ----------------
*  
*  ### Data
*  
*  Вспомогательный компонент, предназначенный для передачи информации рендерам 
*  других типов.
*  
* \note
*  - Для этого компонента не создается рендера, вместо этого он захватывается
*  и используется следующим рендером, который будет создан (какие данные нужны 
*  конкретным рендерам см. в описании соответствующих компонентов).
*  - Идентификатор этого компонента не используется.
*  
*  | kind                            | Параметры                | Тип параметра                | Описание параметра                                                              |
*  | ------------------------------- | ------------------------ | ---------------------------- | ------------------------------------------------------------------------------- |
*  | Position (\ref Footnote "1")    | x, y, z                  | float                        | Положение (координаты) в пространстве                                           |
*  | Rotation (\ref Footnote "1")    | x, y, z                  | float                        | Ориентация (углы поворота вокруг соответствующей оси в радианах) в пространстве |
*  | Scale (\ref Footnote "1")       | x, y, z                  | float                        | Масштабирующие коэффициенты по соответствующим осям                             |
*  | Direction (\ref Footnote "1")   | x, y, z                  | float                        | Вектор направления (из указанной точки в начало координат) в пространстве       |
*  | Attenuation (\ref Footnote "1") | const, linear, exponent  | float                        | Настройки затухания для точечного источника света                               |
*  | Rect (\ref Footnote "1")        | left, top, right, bottom | int                          | Границы прямоугольника                                                          |
*  | Texture                         | data                     | const uint8_t *              | Бинарные данные текстуры в формате R8G8B8A8                                     |
*  | ^                               | width                    | int                          | Ширина изображения в пикселях                                                   |
*  | ^                               | height                   | int                          | Высота изображения в пикселях                                                   |
*  | Shader.HLSL                     | data                     | const uint8_t *              | Содержимое текстового файла шейдера DirectX в бинарном виде                     |
*  | ^                               | count                    | size_t                       | Размер данных шейдера в байтах                                                  |
*  | ^                               | version                  | std::string                  | Версия шейдера (вида 'ps_4_0')                                                  |
*  | ^                               | entry                    | std::string                  | Имя функции точки входа шейдера                                                 |
*  | Buffer                          | data                     | const [Vertex::Polygon] *    | Данные вертексного буфера для отрисовки плоских объектов (\ref Footnote "2")    |
*  | ^                               | ^                        | const [Vertex::Polyhedron] * | Данные вертексного буфера для отрисовки объемных объектов                       |
*  | ^                               | ^                        | const int *                  | Данные индексного буфера                                                        |
*  | ^                               | count                    | size_t                       | Размер данных буфера в байтах                                                   |
*  
* \todo
*  Для шейдеров, текстур, вертексных и индексных буферов добавить параметр -
*  имя файла, из которого должны быть загружены данные.
*  
*  ### Camera
* 
*  Камера определяет способ отрисовки сцены и ее рендер должен быть первым
*  в списке 3D сцены.
*
*  | kind         | Требуется Data (kind) | Параметры | Тип параметра | Описание параметра                                                  |
*  |--------------|-----------------------|-----------|---------------|---------------------------------------------------------------------|
*  | Orthographic | Position              | -         | -             |                                                                     |
*  | Perspective  | Position, Rotation    | distance  | float         | Расстояние от позиции, заданной компонентом Data.Position до камеры |
*  | ^            | ^                     | fov       | float         | Угол поля зрения по вертикали в градусах                            |
*  
*  \b Ортографическа камера использует левостороннюю систему координат, 
*  в которой:
*  - Начало координат находится в левом верхнем углу экрана (viewport'ом
*  в Windows является вся клиентская часть окна, в Android - все за исключением
*  заголовка окна).
*  - Координаты вдоль оси X увеличиваются вправо.
*  - Координаты вдоль оси Y увеличиваются вниз.
*  - Камера смотрит на плоскость Oxy со стороны положительных значений оси Z.
*  - Одному пикселю окна программы соответствует изменение координаты на 1.0f.
*
* \todo
*  - Добавить картинку с осями координат для Windows и Android.
*  
*  \b Перспективная камера использует правостороннюю систему координат:
*  - Координаты вдоль оси X увеличиваются с запада на восток.
*  - Координаты вдоль оси Y увеличиваются с юга на север.
*  - Координаты вдоль оси Z (высота над плоскостью Oxy) увеливаются снизу вверх.
*  - Камера смотрит в точку, заданную компонентом Data.Position с расстояния
*  \b distance (т.е. реализован вид 'от третьего лица', если нужен вид 
*  'от первого лица', установить distance в ноль).
*  - Data.Rotation - это углы поворота самой камеры относительно точки
*  Data.Position (т.е. направление, \b обратное направлению взгляда).
*  - Отсутствие компонента Data.Rotation или нулевые значения углов ориентации
*  соответствуют направлению взгляда из точки, смещенной от Data.Position на 
*  distance вдоль оси X в положительном направлении.
*  
*  ### State
*  
*  Компонент изменения состояния конвеера рендеринга.
*  
*  | kind    | Требуется Data (kind) | Параметры | Тип параметра | Описание параметра                                |
*  | --------| --------------------- | --------- | ------------- | ------------------------------------------------- |
*  | Clear   |                       | color     | uint32_t      | Цвет заливки буфера кадра                         |
*  | Depth   |                       | enabled   | bool          | Включение/отключение использования буфера глубины |
*  | ^       | ^                     | clear     | bool          | Включение/отключение очистки буфера глубины       |
*  | Blend   |                       |           |               |                                                   |
*  | Sampler |                       |           |               |                                                   |
*  | Scissor | Rect                  | enabled   | bool          | В случае false Data.Rect не нужен                 |
*  
* \note
*  Каждая камера при рендеринге отключает:
*  - Блендинг.
*  - Использование буфера глубины.
*  
*  ### Light
*  
*  Компонент источника света.
*  
*  Логика использования источников света предполагает:
*  - Активация рендера камеры создает новую сцену, в которой по умолчанию 
*  источники света отсутствуют (поэтому, если - например - требуется отрисовать 
*  несколько объектов без использования освещения, следует выделить их 
*  в отдельную сцену со своей уникальной камерой).
*  - Компоненты источников света могут располагаться в любом месте списка
*  объектов при создании рендеров (при этом необходимо учитывать, что
*  рендеры источников света добавляют информацию о себе в список источников 
*  света текущей сцены (другими словами - активной камеры), а при рендеринге 
*  текущего кадра используются источники света, установленные во время 
*  рендеринга предыдущего кадра).
*  
*  | kind      | Требуется Data (kind) | Параметры | Тип параметра | Описание параметра                                    |
*  |-----------|-----------------------|-----------|---------------|-------------------------------------------------------|
*  | Ambient   | -                     | color     | uint32_t      | Цвет (ambient) в формате ARGB (0xFF00FF00)            |
*  | Direction | Direction             | color     | uint32_t      | Цвет (diffuse и specular) в формате ARGB (0xFF00FF00) |
*  | Point     | Position, Attenuation | color     | uint32_t      | Цвет (diffuse и specular) в формате ARGB (0xFF00FF00) |
*  
*  При использовании точечных источников света следует учитывать, что 
*  реализации, использующие статический конвеер (с этим ничего нельзя
*  сделать), а также шейдеры, предоставляемые фреймворком по умолчанию (для 
*  унификации результата отрисовки на разных устройствах) реализуют расчет
*  освещения по Гуро (вычисляются цвета вершин, промежуточные получаются путем
*  интерполяции). Т.е. источник света рядом с большой поверхностью, заданной
*  четырьмя вершинами (факел на стене) не даст реалистичного круглого пятна
*  света - вместо этого будет получена однотонная слабо освещенная поверхность,
*  т.к. вершины расположены далеко и (скорее всего) будут иметь черный цвет.
*  В этом случае следует использовать карты освещения или написать собственный
*  шейдер, реализующий другой метод расчета освещения.
*  
*  Пример использования разных типов расчета освещения применительно к одной
*  и той же плоскости, заданной четырьмя вершинами:
*  
* \image html ".\Solution\Covellite.Api\(Documentation)\Lights.png"
*
* \note
*  - Фоновых и направленных источников света может быть не более одного, 
*  точечных может быть несколько.
*  - Пропущенные параметры устанавливаются в 0xFF000000.
*  - Параметры компонента Data.Attenuation используются следующим образом: \n
*  bright = color / (const + (linear + exponent * distance) * distance).
*  - При удалении точечных источников света из 3D сцены следует учитывать, что
*  источник света, не попадающий в поле зрения камеры тем не менее может
*  освещать объекты, попадающие в поле зрения камеры.
*  - Если используется рендеринг при помощи шейдеров (DirectX10/11), то
*  информация об источниках света просто передается пиксельному шейдеру 
*  и необходимо самостоятельно задействовать эту информацию в шейдере (форматы
*  передачи данных шейдерам см. \ref CovelliteApiFxGroup); также для рендеринга
*  сцены без источников света следует использовать пиксельный шейдер, который
*  не использует информацию об источниках света.
*  
*  ### Material
*
*  Компонент материала (нужен для расчета освещения).
*
*  | Параметры | Тип параметра | Описание параметра               |
*  |-----------|---------------|----------------------------------|
*  | ambient   | uint32_t      | Цвет в формате ARGB (0xFF00FF00) |
*  | diffuse   | uint32_t      | Цвет в формате ARGB (0xFF00FF00) |
*  | specular  | uint32_t      | Цвет в формате ARGB (0xFF00FF00) |
*  | emission  | uint32_t      | Цвет в формате ARGB (0xFF00FF00) |
*  | shininess | int32_t       | Значение в диапазоне 0...0x80    |
*  
* \note
*  - Материал должен устанавливаться для каждого объекта 3D сцены, которому
*  требуется рассчет освещения.
*  - Рекомендуется заранее подготовить набор используемых в сцене рендеров 
*  материалов (дерево, металл, камень, пластик и т.п.) и в дальнейшем 
*  использовать рендеры этих компонентов.
*  - Пропущенные параметры устанавливаются в 0xFF000000.
*  - Если используется рендеринг при помощи шейдеров (DirectX10/11):
*   + Информация о материале объекта просто передается шейдеру и необходимо
*   самостоятельно задействовать эту информацию в пиксельном шейдере (форматы
*   передачи данных шейдерам см. \ref CovelliteApiFxGroup).
*   + Компонент материала при создании рендеров должен располагаться после
*   пиксельного шейдера.
*  
* ### Texture
*  
*  Компонент текстуры.
*  
*  | kind      | Требуется Data (kind)       | Параметры | Тип параметра | Описание параметра |
*  |-----------|-----------------------------|-----------|---------------|--------------------|
*  | -         | Texture (\ref Footnote "3") | -         | -             | -                  |
*  
* \todo
*  Параметр для указания индекса текстуры при мультитекстурировании.
*  
* ### Shader
*  
*  Компонент шейдера.
*  
*  | kind   | Требуется Data (kind)           | Параметры |
*  |--------|---------------------------------|-----------|
*  | -      | Shader.HLSL (\ref Footnote "3") | -         |
*  
* \note
*  Тип создаваемого шейдера выводится автоматически из входного типа данных
*  указанной функции точки входа.
*
*  Всем шейдерам в качестве заголовочных файлов передаются:
*  - Файл, содержащий описания структур для передачи данных шейдеру 
*  (\ref CovelliteApiFxGroup).
*  - Файл, содержащий описания форматов входных данных шейдеров
*  
* \snippet ./Solution/Covellite.Api/Covellite.Api/Renderer/fx/Input.fx Input vertex shared structures
*  
*  Если не указаны бинарные данные шейдера (параметры \b data и \b count),
*  вместо них будут использоваться шейдеры по умолчанию (те, что использует
*  фреймворк для рендеринга Gui):
*  
* \include ./Solution/Covellite.Api/Covellite.Api/Renderer/fx/Vertex.fx
*  
* \include ./Solution/Covellite.Api/Covellite.Api/Renderer/fx/Pixel.fx
*  
* ### Buffer
*  
*  Компонент буферов геометрии меша.
*  
*  | kind | Требуется Data (kind)      |
*  |------|----------------------------|
*  | -    | Buffer (\ref Footnote "3") |
*  
* ### Present
*  
*  Компонент отправки информации в конвеер рендеринга.
*  
*  | kind     | Требуется Data (kind)                         |
*  |----------|-----------------------------------------------|
*  | Geometry | Position, Rotation, Scale (\ref Footnote "4") |
*  
* \note
*  - Компонент должен завершать набор компонентов каждого объекта 3D сцены и 
*  должен иметь уникальный id для каждого конкретного объекта.
*  
*  Сноски
*  ------
*  
* \anchor Footnote
*  -# Параметры этих компонентов могут изменяться во время работы программы
*  (т.е. для изменения положения объекта в пространстве не нужно его
*  пересоздавать, достаточно установить новые координаты комопоненту его
*  положения), для изменения остальных (например замены 3D модели объекта)
*  необходимо создать новый набор компонентов, удалить из 3D сцены старый
*  и создать новый объект.
*  -# [Vertex::Polygon] создан специально для рендеринга элементов Gui 
*  и соответствует формату данных, получаемых от libRocket.
*  -# Параметр \b file можно передавать ТОЛЬКО через компонента Data, все 
*  остальные параметры можно указывать непосредственно основному компоненту, 
*  без использования компонента Data.
*  -# Может быть несколько компонентов, что можно использовать для 
*  привязки (совместного движения) объектов друг к другу (в этом случае
*  необходимо гарантировать, чтобы в качестве общего компонента использовался
*  ОДИН И ТОТ ЖЕ объект, совпадения идентификаторов компонентов недостаточно!).
*  
*  [Vertex::Polygon]: \ref covellite::api::Vertex::Polygon
*  [Vertex::Polyhedron]: \ref covellite::api::Vertex::Polyhedron
*
*  Общая концепция использования компонентов
*  =========================================
*  
*  Основная идея работы с 3D объектами предполагает использование архитектуры
*  программы на основе паттерна MVC.
*  
*  Модель
*  ------
*  
*  - Загружает игровой мир как набор ячеек, каждая из которых ссылается 
*  на место хранения информации о содержащихся в ячейке объектах.
*  - Содержит базу данных игровых объектов и функции, которые позволяют получать 
*  набор компонентов (для обновления и рендеринга) игрового объекта по его 
*  идентификатору.
*  - Содержит игровую сцену(ы), которая включает идентификаторы камеры, а также 
*  источников света и объектов, находящихся рядом с камерой.
*  - При перемещениях игрока добавляются приблизившиеся к камере и удаляются 
*  удалившиеся объекты (группами в ячейках).
*  - На стадии обновления обновляются объекты игровой сцены (можно обновлять 
*  объекты постепенно удаляясь от камеры пока не выйдет заданное на обновление 
*  время).
*  
*  Представление
*  -------------
*  
*  - Класс окна, которое создается между окнами Api и Gui.
*  - Содержит, создает и удаляет объекты 3D сцены на основе информации, 
*  полученной от модели.
*  - При построении/обновлении 3D сцены первой должна идти камера.
*  - Изменение геометрии/материала производится удалением/добавлением игрового 
*  объекта.
*  - Состояние 3D сцены является отражением состояния игрового мира, поэтому
*  компоненты рендеров удаляются из 3D сцены при удалении из игрового мира
*  ячеек, содержащих описания этих компонентов.
*  
*  Взаимодействие частей кода игры
*  -------------------------------
*  
*  - Панель GUI с кнопками действий игрока (View) подписывается на события 
*  нажатия кнопок, при нажатии которых вызывает соответствующие функции модели,
*  после чего активирует событие обновления 3D сцены.
*  - Игровая сцена (Model) при действии игрока:
*   + Очищается от объектов, ранее помеченных для удаления.
*   + Объекты, которые выпадают из зоны действия камеры, помечаются на удаление.
*   + Добавляются объекты, которые теперь попадают в зону действия камеры.
*   + Обновляет состояние объектов сцены.
*  - 3D сцена (View) по событию обновления:
*   + Запрашивает у модели набор игровых объектов.
*   + Удаляет объекты, помеченные для удаления.
*   + Добавляет 3D объекты, которых не было при прошлом обновлении.
*   + Рендерит актуальный набор объектов.
*  
*  Примеры использования компонентов
*  =================================
*  
* \ref Draw2DScenePage
*  
* \ref Draw3DScenePage
*/

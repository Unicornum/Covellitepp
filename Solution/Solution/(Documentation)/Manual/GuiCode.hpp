
/**
* \page CreateGuiCodeBriefPage
*  
*  - Создать .rcss и .rml файлы описания отдельных
*  \ref ScreenDescriptionUsingFrameworkAnchor "экранов программы".
*  - Создать \ref ScreenClassesUsingFrameworkAnchor "классы" отдельных экранов
*  программы.
*  - Создать \ref MainWindowClassUsingFrameworkAnchor "класс" главного окна
*  программы.
*  
*/

/**
* \page CreateGuiCodePage Создание кода панелей GUI
*  
* \copydoc CreateGuiCodeBriefPage
*  
* \anchor ScreenDescriptionUsingFrameworkAnchor
*
*  Создание .rcss и .rml файлов описания отдельных экранов программы
*  -----------------------------------------------------------------
*
*  Как это делается см. в документации/примерах
*  [библиотеки](https://mikke89.github.io/RmlUiDoc/).
*
*  [Доступные css свойства](https://mikke89.github.io/RmlUiDoc/pages/rcss/property_index.html).
*
* \note
*  Внешний вид элементов управления можно задавать при помощи либо стилей css,
*  либо изображений из заранее подготовленной текстуры - во втором случае
*  .rml файл грузится быстрее.
*
*  Все файлы (.rml, .rcss, .png) следует поместить в папку (Windows - корневая
*  папка программы, Android - папка assets проекта Packaging), пути к этим
*  файлам в программе задаются относительно этой папки, а в самом файле -
*  относительно папки расположения этого файла.
*
*  Файлы .rml могут содержать в качестве текста не ASCII символы, но в этом
*  случае их следует сохранять как utf8, а используемые шрифты должны
*  поддерживать соответствующие Unicode символы.
*  
* \warning
*  Файлы .rcss не должны сохраняться как utf8, т.к. они включаются целиком
*  в состав файлов .rml при парсинге, что приводит к появлению Assert'ов при
*  запуске Debug версии программы.
*
* \anchor ScreenClassesUsingFrameworkAnchor
*
*  Создать классы отдельных экранов программы
*  ------------------------------------------
*
*  Для каждого экрана программы необходимо создать класс-наследник от класса
*  covellite::rocket::Layer, передав ему в качестве второго параметра
*  конструктора путь к соответствующему .rml файлу.
*
* \snippet .\Solution\Example\Example\Layers\MainScreen.hpp Layer example
*  
* \snippet .\Solution\Example\Example\Layers\MainScreen.cpp Layer example
*
*  Если необходим экран с заголовком, содержащим текст, заданный в заголовке
*  .rml файла, создать класс наследник слоя, в конструкторе которого передать
*  базовому классу идентификатор заголовка из его объявления в .rml файле.
*
* \todo
*  Добавить пример использования панели с заголовком.
*
* \anchor MainWindowClassUsingFrameworkAnchor
*
*  Создание класса главного окна программы
*  ---------------------------------------
*
*  Класс главного окна программы отвечает за переключение пользовательских
*  экранов и обработку пользовательского ввода.
*
*  Создать класс-наследник от класса covellite::app::IWindow, в конструкторе
*  котрого установить набор строк для локализации приложения, добавить
*  стартовый экран программы и подписаться на требующие обработки на уровне
*  окна приложения события.
*
* \snippet .\Solution\Example\Example\ExampleWindow.cpp Constructor main window
*
* \note
*  - Идентификаторы элементов управления передаются в функцию-обработчик
*  события Click_t в нижнем регистре независимо от того, каким образом
*  они были заданы в .rml файле.
*  - Цвет фона можно задавать как поле \b background-color для body в .rcss файле,
*  но в этом случае для заполнения всего окна следует в стилях rml и body
*  поставить
* \code

rml,
body
{
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
}
  
body
{
  background-color: blue;
  ...
   
* \endcode
*
*  В классе окна событие Click_t будет вызываться для всех элементов
*  управления всех активных пользовательских экранов, при этом здесь имеет
*  смысл обрабатывать события, непосредственно связанные с работой окна
*  (переход к другому слою или выход из программы).
*
*  [События](\ref CovelliteEventsIdGroup), которые может обрабатывать окно.
*/

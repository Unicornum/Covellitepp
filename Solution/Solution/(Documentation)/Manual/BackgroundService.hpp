
/**
* \page BackgroundServicePage ‘оновое выполнение задач в коде —++
*  
*  ѕроблема
*  --------
*  
*  ≈сли из кода —++ запустить дополнительный поток (boost::thread), то при 
*  деактивации программы возможна одна из двух ситуаций (причем заранее 
*  предсказать это невозможно):
*  - ѕолна€ и окончательна€ остановка работы этого потока через несколько секунд
*  работы (веро€тно, из-за выгрузки главного .so файла).
*  - ѕереход потока в режим работы, при котором ему передаетс€ управление
*  очень редко (раз в 20-30 минут, даже если выставлена задержка в 1 сек.,
*  видимо, понижаетс€ приоритет потока).
*  
*  –ешение
*  -------
*  
*  ƒл€ гарантированной работы фонового потока —++ с указанным интервалом 
*  времени при неактивном приложении, необходимо:
*  
*  - ƒобавить в проект \b Packaging класс сервиса, который при старте будет 
*  загружать главный .so файл —++ программы и выполн€ть в фоновом потоке
*  любое тривиальное действие (этот фоновый поток необходим, чтобы система не
*  'убивала' сервис):
*  
*  ### BackgroundService.java
*  
* \include ".\Solution\(Documentation)\Manual\BackgroundService.java"
*  
*  - «арегистрировать в \b AndroidManifest.xml созданный класс как сервис:
*  
* \code
  
<application ...>
  <service android:name="com.Simple.BackgroundService" android:exported="false"/>
  ...
    
* \endcode
*  
*  - ¬ классе, наследуемом от \b NativeActivity, добавить запуск сервиса 
*  (будет запущен при первой активации программы):
*  
* \code

import android.os.Bundle;
import android.content.Intent;
    
public class Simple extends NativeActivity
{
  @Override
  public void onCreate(Bundle savedInstanceState)
  {
    super.onCreate(savedInstanceState);
    startService(new Intent(this, BackgroundService.class));
  }
  
* \endcode
*  
*  - ¬ коде —++ добавить функцию, котора€ будет вызыватьс€ при загрузке
*  .so файла при старте сервиса и в ней запустить рабочий фоновый поток:
*  
* \code
  
extern "C"
{
  
jint JNI_OnLoad(JavaVM *, void *)
{
  // «десь можно запустить поток
  
  return JNI_VERSION_1_6;
}
  
} // extern "C"
  
* \endcode
*  
* \note
*  ¬ажно понимать, что сервис может быть остановлен и перезапущен в любой 
*  момент времени (.so файл будет выгружен и рабочий поток прекратит работу),
*  поэтому следует озаботитьс€ сохранением данных, полученных через 
*  параметр (ANativeActivity *) при активации программы.
*/

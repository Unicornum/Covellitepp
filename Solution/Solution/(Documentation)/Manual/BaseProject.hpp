
/**
* \page CreateBaseProjectBriefPage
*  
*  - Создать проект сборки основного модуля программы
*  [Windows](\ref MainModuleWindowsUsingFrameworkAnchor)/
*  [Android](\ref MainModuleAndroidUsingFrameworkAnchor).
*  - Создать [класс](\ref MainApplicationClassUsingFrameworkAnchor) программы.
*  - Добавить рализациию функции установки используемых фреймворком
*  [значений параметров по умолчанию](\ref SettingsUsingFrameworkAnchor).
*  - Добавить реализацию функции создания объекта
*  [виртуальной файловой системы](\ref ReadFileDataUsingFrameworkAnchor),
*  который будет использоваться программой для чтения данных из файлов.
*/

/**
* \page CreateBaseProjectPage Создание базового проекта приложения
*  
* \copydoc CreateBaseProjectBriefPage
*
* \anchor MainModuleWindowsUsingFrameworkAnchor
*
*  Создание проекта сборки основного модуля программы для Windows
*  --------------------------------------------------------------
*
*  Создать \b пустой проект приложения Windows:
*
* \image html ".\Solution\(Documentation)\Manual\Vs2019.Windows.png"
*
*  Добавить в проект .ico файл иконки программы и .rc файл, определяющий иконку
*  программы как \b ApplicationIcon (именно эта иконка будет отображаться
*  в заголовке окна программы):
*
* \include ./Solution/Example/Example/Icon.rc
*
* \note
*  - В качестве заголовка окна программы будет использовано значение макроса
*  \b \_\_APPLICATION_NAME\_\_ из файла версии решения.
*  - Режим работы (полноэкранный/оконный), размеры и цвет фона окна программы
*  задаются в [настройках](\ref SettingsUsingFrameworkAnchor) приложения.
*
* \anchor MainModuleAndroidUsingFrameworkAnchor
*
*  Создание проекта сборки основного модуля программы для Android
*  --------------------------------------------------------------
*
*  ### Создание проекта сборки .apk файла программы
*
*  Создать "Простое приложение Android":
*
* \image html ".\Solution\(Documentation)\Manual\Vs2019.Android.png"
*
*  Добавить в его java код перехват функции dispatchKeyEvent() 
*  ([как это делается и зачем это нужно](\ref InputRussianLettersPage)).
*
*  \subpage BackgroundServicePage
*
* \note
*  Чтобы программа работала в полноэкранном режиме (без статус-бара), необходимо
*  добавить в AndroidManifest.xml
* \code
<application ... android:theme="@android:style/Theme.Holo.NoActionBar.Fullscreen">
* \endcode
*
*  ### Создание проекта сборки главного модуля программы
*
*  Создать проект .so файла (который будет загружаться при старте
*  NativeActivity):
*
* \image html ".\Solution\(Documentation)\Manual\Vs2019.So.png"
*
*  Проекту Packaging добавить его в ссылки, а в AndroidManifest.xml добавить
*  запись загрузки именно этого модуля ([подробнее](\ref InputRussianLettersPage)).
*
* \anchor MainApplicationClassUsingFrameworkAnchor
*
*  Создание класса программы
*  -------------------------
*
*  \b Класс \b программы содержит главный цикл обработки сообщений, отвечает за
*  обработку системных сообщений и создание/разрушение главного окна программы.
*
* \note
*  При написании кода следует учитывать, что Android в NativeActivity загружает
*  главный модуль программы только один раз, при первом запуске программы,
*  после чего при каждой последующей активации программы вызывает функцию точки
*  входа. При этом объект класса программы будет создаваться каждый раз заново,
*  но все статические объекты будут иметь состояния, унаследованные от
*  предыдущей активации.
*
*  Создать класс-наследник от covellite::app::Application, конструктору
*  которого передать способ отрисовки окна приложения (по событию или
*  непрерывно), подписаться на необходимые события и добавить код обработки
*  этих событий.
*
* \snippet .\Solution\Example\Example\ExampleApp.cpp Constructor main application class
*
*  [События](\ref CovelliteEventsIdGroup), которые может обрабатывать приложение.
*
* \note
*  Подписка на событие \b Application.Start обязательна, в обработчике
*  следует создать набор окон программы; в качестве класса главного окна
*  программы следует указать ранее созданный класс. \n
*  Подписка на собыие \b Application.Exit не требуется, окно будет
*  уничтожено автоматически.
* 
*  - \b BasementWindow - класс окна программы, обеспечивающий предварительную
*  отрисовку в окне, поверх которой будeт отображаться панели GUI (например,
*  это может быть сцена из [2D](\ref Draw2DScenePage) или
*  [3D](\ref Draw3DScenePage) объектов).
*  - \b ExampleWindow - класс главного окна программы (см. \ref CreateGuiCodePage).
*  
* \snippet .\Solution\Example\Example\ExampleApp.cpp Create main window
*
*  Для создания точки входа программы использовать макрос
*  \b APPLICATION_ENTRY_POINT, в качестве параметра которого указать имя
*  созданного класса программы.
*
* \snippet .\Solution\Example\Example\ExampleApp.cpp Create entry point
*
* \anchor SettingsUsingFrameworkAnchor
*
*  Настройки
*  ---------
*
* ### Для всех платформ
*
*  | Параметр             | Раздел                        | Описание                                                                |
*  | :------------------- | :---------------------------- | :---------------------------------------------------------------------- |
*  | PathToFontsDirectory | Root                          | Путь к папке расположения шрифтов, которые используются в .rcss файлах. |
*  | R                    | Root\\Window\\BackgroundColor | Цвет фона окна программы по умолчанию: красная компонента [0...255].    |
*  | G                    | Root\\Window\\BackgroundColor | Цвет фона окна программы по умолчанию: зеленая компонента [0...255].    |
*  | B                    | Root\\Window\\BackgroundColor | Цвет фона окна программы по умолчанию: синяя компонента [0...255].      |
*  | A                    | Root\\Window\\BackgroundColor | Цвет фона окна программы по умолчанию: прозрачность [0...255].          |
*
* ### Только для Windows
*
*  | Параметр        | Раздел             | Описание                                                               |
*  | :-------------- | :----------------- | :--------------------------------------------------------------------- |
*  | GraphicsApi     | Root\\Window       | Используемый для рендеринга графический Api (Auto, DirectX11, OpenGL). |
*  | IsFullScreen    | Root\\Window       | Полноэкранный/оконный режим работы программы (true/false).             |
*  | IsResized       | Root\\Window       | Разрешение/запрет изменения размеров окна программы мышью (true/false).|
*  | Width           | Root\\Window\\Size | Ширина клиентской области окна программы в пикселях.                   |
*  | Height          | Root\\Window\\Size | Высота клиентской области окна программы в пикселях.                   |
*  | MinClientWidth  | Root\\Window\\Size | Минимальная ширина клиентской области окна программы в пикселях.       |
*  | MinClientHeight | Root\\Window\\Size | Минимальная высота клиентской области окна программы в пикселях.       |
*
* ### Только для Android
*
*  | Параметр    | Раздел       | Описание                                                                 |
*  | :---------- | :----------- | :----------------------------------------------------------------------- |
*  | GraphicsApi | Root\\Window | Используемый для рендеринга графический Api (Auto, OpenGLES3, OpenGLES). |
*
* ### Настройки по умолчанию
*
*  В код проекта необходимо также добавить реализацию функции установки
*  значений параметров по умолчанию. Функция \b в \b обязательном \b порядке
*  должна устанавливать значения по умолчанию для всех параметров.
*  
*  
*  Пример:
*
* \include .\Solution\Example\Example\DefaultSettings.cpp
*
* \anchor ReadFileDataUsingFrameworkAnchor
*
*  Настройка чтения данных из файлов
*  ---------------------------------
*
*  В код проекта необходимо также добавить реализацию функции настройки
*  способа чтения данных из файлов.
*  
*  
*  Пример:
*
* \include .\Solution\Example\Example\ReadFileData.cpp
*/

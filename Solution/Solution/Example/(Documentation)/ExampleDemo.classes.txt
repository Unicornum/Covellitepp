
@startuml

class Events as "covellite::events::Events"
{
}

class GuiPanels as "layers::Demo"
{
}

interface model_IGameWorld as "model::IGameWorld"
{
  {abstract} + GameScene * CreateGameScene();
  {abstract} + float GetLandscapeHeight(CubeCoords);
  {abstract} + size_t GetGameObjectType(CubeCoords);
  ---
}

interface model_IComponents as "model::IDbComponents"
{
  {abstract} + Components_t GetObject(Id);
  {abstract} + ComponentPtr_t GetComponent(ComponentId_t);
  ---
  signal DoAddObject
  signal DoRemoveObject
}

class model_Main as "model::Model"
{
  + Model(Events &);
  ---
}

class model_Components as "model::DbComponents"
{
  + Id AddGameObject(Object_t);
  + void RemoveGameObject(Id);
  + ... GetComponent(...);
  ---
}

interface model_IGameObject as "model::IGameObject"
{
  {abstract} + size_t GetType(void);
  {abstract} + Object_t[] GetObject(Any_t);
  ---
}

class model_GameObject as "model::GameObject"
{
  + static IGameObjectPtr_t Create(Support::Value);
  + static IGameObjectPtr_t Create(Extra::Value);
  + static IGameObjectPtr_t Create(Landscape::Value, IGameWorld &);
  ---
  + GameObject(size_t);
}

class model_Skybox as "model::Skybox"
{
}

class model_Camera as "model::Camera"
{
}

class model_Landscape as "model::Landscape"
{
}

class model_Water as "model::Water"
{
}

class model_Compass as "model::Compass"
{
}

class model_Loader as "model::Loader"
{
}

class model_GameWorld as "model::GameWorld"
{
  + GameWorld(Events &, DbComponents &);
  ---
}

class model_GameScene as "support::GameScene"
{
  + void SetCameraInfo(CameraInfo);
  + void Render(Callback_t);
  + void ProcessAll(Callback_t);
  ---
  + void Add(SceneId, Ids);
  + void Add(SceneId, Ids, CubeCoords);
  + Ids Remove(CubeCoords);
  + void CompleteReplace(void);
  + void CompleteUpdate(void);
  ---
}

class model_Scene as "support::Scene"
{
  + SceneObjects_t Objects
}

model_IComponents <|-.- model_Components
model_IComponents <|-.- model_Main
model_IGameWorld <|-.- model_GameWorld
model_IGameWorld <|-.- model_Main
model_Main *-- model_Components
model_Main *-- model_GameWorld
model_GameWorld o-- model_Components

model_GameWorld *-- model_IGameObject
model_GameWorld *-- model_GameScene

model_IGameObject <|-.- model_GameObject
model_IGameWorld --o model_GameObject

model_GameObject o---left--- Filesystem
model_GameObject <|-- model_Skybox
model_GameObject <|-- model_Camera
model_GameObject <|-- model_Landscape
model_GameObject <|-- model_Water
model_GameObject <|-- model_Compass
model_GameObject <|-- model_Loader

model_GameScene *-- model_Scene

model_GameWorld o-left- Events
GuiPanels o-- Events

interface view_IScene as "view::I3DScene"
{
  {abstract} + void SetGameScene(GameScene *);
  {abstract} + void Render();
  ---
}

interface view_IRenders as "view::IDbRenders"
{
  {abstract} + void AddObject(Id_t, Object_t);
  {abstract} + void RemoveObject(Id_t, Object_t);
  ---
}

class view_Main as "view::View"
{
  + View(Renders &);
}

class view_Renders as "view::DbRenders"
{
  + Renders_t GetRenders(Id);
  ---
  + DbRenders(Renders &);
}

class view_3DScene as "view::3DScene"
{
  + 3DScene(DbRenders &);
  ---
}

view_IRenders <|-.- view_Renders
view_IRenders <|-.- view_Main
view_IScene <|-.- view_3DScene
view_IScene <|-.- view_Main
view_Main *-- view_Renders
view_Main *-- view_3DScene
view_3DScene o-- view_Renders
view_3DScene *-- model_GameScene

class controller_Main as "controller::Controller"
{
  + Main(model::IDbComponents &, view::IDbRenders &);
  + Main(mode::IGameWorld &, view::I3DScene &);
  ---
}

controller_Main o-- model_IGameWorld
controller_Main o-- model_IComponents
controller_Main o-- view_IScene
controller_Main o-- view_IRenders

@enduml

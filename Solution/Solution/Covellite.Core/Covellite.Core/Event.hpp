
#pragma once

namespace covellite
{

namespace core
{

/**
* \ingroup gCovelliteCoreClasses
* \brief
*  Класс входит в проект \ref CovelliteCorePage \n
*  Класс универсальных идентификаторов событий фреймворка.
*
* \version
*  1.0.0.0        \n
*  1.1.0.0        \n
*  1.1.1.0        \n
*  1.1.2.0        \n
* \date
*  18 Сентябрь 2017    \n
*  24 Сентябрь 2017    \n
*  13 Октябрь 2017    \n
*  22 Октябрь 2017    \n
* \author
*  CTAPOBEP (unicornum.verum@gmail.com)
* \copyright
*  © CTAPOBEP 2017
*/
class Event final
{
public:
  // 32 - это код, который генерирует java код при нажатии кнопки на 
  // клавиатуре (понадобилось из-за того, что в нативном коде невозможно 
  // получить код нажатой клавиши за пределами ASCII кодировки).
  static const int32_t APP_CMD_KEY_PRESSED = 32;

public:
  /// Группа системных событий.
  enum System
  {
    Stop = 0,    ///< Завершение работы приложения (без параметров).
    Pause,       ///< Пауза в работе приложения (без параметров).
    Resume,      ///< Возобновление работы приложения (без параметров).
    Destroy,     ///< Завершение работы программы (без параметров).

    LastSystem
  };

  /// Группа оконных событий.
  enum Window
  {
    Create          ///< Создание окна приложения. \b ВАЖНО! В отличие от 
                    ///< Windows (где событие WM_CREATE приходит ПОСЛЕ создания 
                    ///< окна), это событие служит указанием, что окно ДОЛЖНО 
                    ///< быть создано, поэтому его следует использовать для 
                    ///< создания объектов окон в классе приложения (без 
                    ///< параметров).
      = LastSystem,
    Close,          ///< Закрытие окна приложения (без параметров).
    LostFocus,      ///< Приложение потеряло фокус ввода (без параметров).
    GainedFocus,    ///< Приложение получило фокус ввода (без параметров).
    Resize,         ///< Изменение размеров окна программы, например,
                    ///< при повороте Android устройства (без параметров).
    Drawing,        ///< Сигнал вызывается при необходимости перерисовки окна.
                    ///< В зависимости от способа запуска программы 
                    ///< (см. Application::Run()), будет вызываться непрерывно,
                    ///< либо только после получения программой сообщения
                    ///< (без параметров).
    StartDrawing,   ///< Сигнал вызывается непосредственно перед событием 
                    ///< Drawing (без параметров).
    FinishDrawing,  ///< Сигнал вызывается сразу после события Drawing
                    ///< (без параметров).

    LastWindow
  };

  /// Группа событий ввода пользователя.
  enum Input
  {
    Motion        ///< Сигнал вызывается при движении мыши по окну/пальца по 
                  ///< экрану (параметр - params::Motion).
      = LastWindow,
    Touch,        ///< Сигнал вызывается при при нажатии левой кнопки мыши/
                  ///< касании пальца экрана (без параметров).
    Release,      ///< Сигнал вызывается при отпускании левой кнопки мыши/
                  ///< отрыве пальца от экрана (без параметров).
    KeyPressed,   ///< Сигнал вызывается при нажатии кнопки на клавиатуре;
                  ///< используется для передачи Unicode кода символа нажатой
                  ///< кнопки текстовым полям ввода (параметр - 
                  ///< params::KeyPressed).
    KeyDown,      ///< Сигнал вызывается при нажатии кнопки на клавиатуре;
                  ///< используется для перехвата виртуального кода кнопки
                  ///< (параметр - params::KeyCode).
    KeyUp,        ///< Сигнал вызывается при отпускании кнопки на клавиатуре;
                  ///< используется для перехвата виртуального кода кнопки
                  ///< (параметр - params::KeyCode).
    Back,         ///< Сигнал перехода к предыдущему слою. Генерируется при 
                  ///< нажатии Alt + Left в Windows и Back (нижней правой) в
                  ///< Android (без параметров).

    LastInput
  };

  /// Группа специфических событий фреймворка.
  enum Framework
  {
    Error       ///< Исключение при вызове обработчика других сигналов 
                ///< (параметр - params::Error).
      = LastInput,

    LastFramework
  };

  /// Группа событий libRocket.
  enum Rocket
  {
    Click       ///< Клик по элементу управления (параметр - params::Click).
      = LastFramework,  
  };
};

} // namespace core

} // namespace covellite
